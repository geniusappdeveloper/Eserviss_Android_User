package com.app.taxisharingDriver;

import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Intent;
import android.location.Location;
import android.os.Build;
import android.support.v4.app.FragmentActivity;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

import com.app.taxisharingDriver.utility.LocationUtil;
import com.app.taxisharingDriver.utility.NetworkNotifier;
import com.app.taxisharingDriver.utility.Scaler;
import com.app.taxisharingDriver.utility.SessionManager;
import com.app.taxisharingDriver.utility.Utility;
import com.crashlytics.android.Crashlytics;

import io.fabric.sdk.android.Fabric;


/**
 * @author admin-pc
 *
 */

@TargetApi(Build.VERSION_CODES.HONEYCOMB)
public class SplahsActivity extends FragmentActivity implements OnClickListener ,NetworkNotifier
{
	protected int _splashTime = 1000;
	protected boolean _active = true;
	private android.widget.RelativeLayout loginandregisterlayout;
	private Button registerbutton,signinbutton;
	boolean canGetLocation = false;
	private LocationUtil locationUtil;
	static boolean isRejected=false;

	@SuppressLint("NewApi")
	@Override
	protected void onCreate(android.os.Bundle bundle)
	{
		super.onCreate(bundle);
		Fabric.with(this, new Crashlytics());
		//getActionBar().hide();
		setContentView(R.layout.activity_splash);
		initData();
		locationUtil = new LocationUtil(this, this);
		try 
		{
			registerbutton.setOnClickListener(this);
			signinbutton.setOnClickListener(this);
		}
		catch (Exception e)
		{
           e.printStackTrace();
		}
	}
	@Override
	protected void onResume() 
	{
		super.onResume();
		//getLocation(SplahsActivity.this);
		animateview(1);
		SessionManager sessionManager =new SessionManager(this);
		Utility.printLog("splash isUserLogdIn"+sessionManager.isUserLogdIn());
		if (sessionManager.isUserLogdIn()&&(isRejected==false))
		{
			Intent intent=new Intent(this, MainActivity.class);
			startActivity(intent);
			finish();
		}
		else 
		{

			try 
			{
				Thread splashTread = new Thread() 
				{
					@Override
					public void run()
					{
						try {
							int waited = 0;
							while (_active && (waited < _splashTime)) 
							{
								sleep(100);
								if (_active) 
								{
									waited += 100;
								}
							}
						} 
						catch (InterruptedException e) 
						{
							// do nothing
						} 
						finally 
						{
							try 
							{
								runOnUiThread(new Runnable() 
								{
									@Override
									public void run()
									{
										animateview(2);

									}
								});
							} 
							catch (Exception e2) 
							{
								e2.printStackTrace();
							}

						}
					}
				};
				splashTread.start();
			} 
			catch (Exception e) 
			{
				Utility.printLog("Exception  = "+e);
			}
		}
	}
	
	@Override
	protected void onStart() 
	{
		super.onStart();
		locationUtil.connectGoogleApiClient();
	}
	
	
	@Override
	protected void onStop()
	{
		super.onStop();
		locationUtil.disconnectGoogleApiClient();
	}
	
	/**
	 * @author admin-pc
	 * 
	 * Initialise layout views 
	 *
	 */
	private void initData()
	{
		loginandregisterlayout=(android.widget.RelativeLayout)findViewById(R.id.loginandregisterlayout);
		registerbutton=(Button)findViewById(R.id.registerbutton);
		signinbutton=(Button)findViewById(R.id.signinbutton);
	}

	/**
      2    * A sentence (must be terminated with a period, '.') describing at a high level what
      3    * this method does.  The first sentence will be part of the brief description that is
      4    * generated by the javadoc tool. Any additional text will be part of the detailed
      5    * description.
      6    *
      7    * @param someValue A description of what this parameter is for.  Should include 
      8    * restriction, if any, on the values passed in.
      9    *
      10   * @param anotherValue A description of what this parameter is for.  Should include 
      11   * restriction, if any, on the values passed in.
      12   *
      13   * @return A description of what value(s) are returned and under what specific
      14   * circumstances.
      15   *
      16   * @throws InvalidArgumentException describe when this exception is thrown by the
      17   * method.
      18   */ 


	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	/**
	 * @author admin-pc
	 * 
	 * This methode is using for animate view 
	 * @parans for direction of animation 
	 *
	 */
	@SuppressLint("NewApi")
	private void animateview(int direction)
	{
		final double arrayOfscallingfactor[]=Scaler.getScalingFactor(SplahsActivity.this);
		AnimatorSet set = new AnimatorSet();
		switch (direction) 
		{
		case 1:
			int dpValueleft = 800; // margin in dips

			int maptopMargin = (int)Math.round(dpValueleft*arrayOfscallingfactor[1]); // margin in pixels
			ObjectAnimator  animation1 = ObjectAnimator.ofFloat(loginandregisterlayout, "y", maptopMargin);
			animation1.setDuration(1);
			set.playTogether(animation1);
			set.start();
			break;
		case 2:


			int dpValueleftforbottomlayout = 650; // margin in dips
			int bottomtoplayouttopMargin = (int)Math.round(dpValueleftforbottomlayout*arrayOfscallingfactor[1]); // margin in pixels
			ObjectAnimator  animation3 = ObjectAnimator.ofFloat(loginandregisterlayout, "y", bottomtoplayouttopMargin);
			animation3.setDuration(1000);
			set.playTogether(animation3);
			set.start();
			break;

		}
	}

	@Override
	public void onClick(View v) 
	{
		switch (v.getId())
		{
		case R.id.registerbutton:
			startActivity(SplahsActivity.this ,RegisterActivity.class);
			break;
		case R.id.signinbutton:
			startActivity(SplahsActivity.this, LoginActivity.class);

			break;

		default:
			break;
		}

	}
	private void startActivity(Activity context ,Class<?> cls)
	{
		Intent intent=new Intent(context, cls);
		startActivity(intent);
	}

	/**
	 * Function to show settings alert dialog
	 * */

	
	@Override
	public void updatedInfo(String info) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void locationUpdates(Location location) {
		SessionManager sessionManager = new SessionManager(this);
		sessionManager.setDriverCurrentlat(""+location.getLatitude());
		sessionManager.setDriverCurrentLongi(""+location.getLongitude());
		
	}
	@Override
	public void locationFailed(String message) {
		// TODO Auto-generated method stub
		
	}

}
